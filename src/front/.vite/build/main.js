"use strict";const s=require("electron"),u=require("path"),m=require("better-sqlite3");function r(){const n=u.join(__dirname,"../db/","database.sqlite");console.log(n);const t=m(u.join(__dirname,"/db/","database.sqlite"),{verbose:console.log,fileMustExist:!0});return t.pragma("foreign_keys = ON"),t}const i={async insert(n){const t=r(),e=t.prepare("INSERT INTO users (username, password, role, createdAt) VALUES (@username, @password, @role, @createdAt)").run(n);return t.close(),e},async update(n){const t=r(),e=t.prepare("UPDATE users SET username = @username, password = @password, role = @role, createdAt = @createdAt WHERE id = @id").run(n);return t.close(),e},async delete(n){const t=r(),e=t.prepare("DELETE FROM users WHERE id = ?").run(n);return t.close(),e},async get(n){const t=r(),e=await t.prepare("SELECT * FROM users WHERE id = ?").get(n);return t.close(),e},async getAll(){const n=r(),a=n.prepare("SELECT * FROM users").all();return n.close(),a},async getByUsername(n){const t=r(),e=t.prepare("SELECT * FROM users WHERE username = ?").get(n);return t.close(),e}},c={async insert(n){const t=r(),e=t.prepare("INSERT INTO sessions (projectId, userId, patientId, logPath, createdAt) VALUES (@projectId, @userId, @patientId, @logPath, @createdAt)").run(n);return t.close(),e},async update(n){const t=r(),e=t.prepare("UPDATE sessions SET projectId = @projectId, userId = @userId, patientId = @patientId, logPath = @logPath, createdAt = @createdAt WHERE id = @id").run(n);return t.close(),e},async delete(n){const t=r(),e=t.prepare("DELETE FROM sessions WHERE id = ?").run(n);return t.close(),e},async get(n){const t=r(),e=await t.prepare("SELECT * FROM sessions WHERE id = ?").get(n);return t.close(),e},async getAll(){const n=r(),a=n.prepare("SELECT * FROM sessions").all();return n.close(),a}},o={async insert(n){const t=r(),e=t.prepare("INSERT INTO projects (name, filePath, authorId, createdAt, updatedAt) VALUES (@name, @filePath, @author)").run(n);return t.close(),e},async update(n){const t=r(),e=t.prepare("UPDATE projects SET name = @name, filePath = @filePath, authorId = @author").run(n);return t.close(),e},async delete(n){const t=r(),e=t.prepare("DELETE FROM projects WHERE id = ?").run(n);return t.close(),e},async get(n){const t=r(),e=await t.prepare("SELECT * FROM projects WHERE id = ?").get(n);return t.close(),e},async getAll(){const n=r(),a=n.prepare("SELECT * FROM projects").all();return n.close(),a}},d={async insert(n){const t=r(),e=t.prepare("INSERT INTO patients (name, surname, birthdate, observations, createdAt, updatedAt) VALUES (@name, @surname, @birthdate, @observations, @createdAt, @updatedAt)").run(n);return t.close(),e},async update(n){const t=r(),e=t.prepare("UPDATE patients SET name = @name, surname = @surname, birthdate = @birthdate, observations = @observations, createdAt = @createdAt, updatedAt = @updatedAt WHERE id = @id").run(n);return t.close(),e},async delete(n){const t=r(),e=t.prepare("DELETE FROM patients WHERE id = ?").run(n);return t.close(),e},async get(n){const t=r(),e=await t.prepare("SELECT * FROM patients WHERE id = ?").get(n);return t.close(),e},async getAll(){const n=r(),a=n.prepare("SELECT * FROM patients").all();return n.close(),a}},l={async insert(n){const t=r(),e=t.prepare("INSERT INTO clinicalConditions (name) VALUES (@name)").run(n);return t.close(),e},async update(n){const t=r(),e=t.prepare("UPDATE clinicalConditions SET name = @name WHERE id = @id").run(n);return t.close(),e},async delete(n){const t=r(),e=t.prepare("DELETE FROM clinicalConditions WHERE id = ?").run(n);return t.close(),e},async get(n){const t=r(),e=await t.prepare("SELECT * FROM clinicalConditions WHERE id = ?").get(n);return t.close(),e},async getAll(){const n=r(),a=n.prepare("SELECT * FROM clinicalConditions").all();return n.close(),a}},p={async insert(n){const t=r(),e=t.prepare("INSERT INTO patientsClinicalConditions (clinicalConditionId, patientId, createdAt) VALUES (@clinicalConditionId, @patientId, @createdAt)").run(n);return t.close(),e},async update(n){const t=r(),e=t.prepare("UPDATE patientsClinicalConditions SET clinicalConditionId = @clinicalConditionId, patientId = @patientId, createdAt = @createdAt WHERE id = @id").run(n);return t.close(),e},async delete(n){const t=r(),e=t.prepare("DELETE FROM patientsClinicalConditions WHERE id = ?").run(n);return t.close(),e},async get(n){const t=r(),e=await t.prepare("SELECT * FROM patientsClinicalConditions WHERE id = ?").get(n);return t.close(),e},async getAll(){const n=r(),a=n.prepare("SELECT * FROM patientsClinicalConditions").all();return n.close(),a}};require("electron-squirrel-startup")&&s.app.quit();const E=()=>{const n=new s.BrowserWindow({width:800,height:600,webPreferences:{preload:u.join(__dirname,"preload.js")}});n.loadURL("http://localhost:5173"),n.webContents.openDevTools()};s.app.on("ready",E);s.app.on("window-all-closed",()=>{process.platform!=="darwin"&&s.app.quit()});s.app.whenReady().then(()=>{s.ipcMain.handle("db:user.insert",async(n,t)=>i.insert(t)),s.ipcMain.handle("db:user.update",async(n,t)=>i.update(t)),s.ipcMain.handle("db:user.delete",async(n,t)=>i.delete(t)),s.ipcMain.handle("db:user.get",async(n,t)=>i.get(t)),s.ipcMain.handle("db:user.getAll",async()=>i.getAll()),s.ipcMain.handle("db:user.getByUsername",async(n,t)=>i.getByUsername(t)),s.ipcMain.handle("db:session.insert",async(n,t)=>c.insert(t)),s.ipcMain.handle("db:session.update",async(n,t)=>c.update(t)),s.ipcMain.handle("db:session.delete",async(n,t)=>c.delete(t)),s.ipcMain.handle("db:session.get",async(n,t)=>c.get(t)),s.ipcMain.handle("db:session.getAll",async()=>c.getAll()),s.ipcMain.handle("db:project.insert",async(n,t)=>o.insert(t)),s.ipcMain.handle("db:project.update",async(n,t)=>o.update(t)),s.ipcMain.handle("db:project.delete",async(n,t)=>o.delete(t)),s.ipcMain.handle("db:project.get",async(n,t)=>o.get(t)),s.ipcMain.handle("db:project.getAll",async()=>o.getAll()),s.ipcMain.handle("db:patient.insert",async(n,t)=>d.insert(t)),s.ipcMain.handle("db:patient.update",async(n,t)=>d.update(t)),s.ipcMain.handle("db:patient.delete",async(n,t)=>d.delete(t)),s.ipcMain.handle("db:patient.get",async(n,t)=>d.get(t)),s.ipcMain.handle("db:patient.getAll",async()=>d.getAll()),s.ipcMain.handle("db:clinicalCondition.insert",async(n,t)=>l.insert(t)),s.ipcMain.handle("db:clinicalCondition.update",async(n,t)=>l.update(t)),s.ipcMain.handle("db:clinicalCondition.delete",async(n,t)=>l.delete(t)),s.ipcMain.handle("db:clinicalCondition.get",async(n,t)=>l.get(t)),s.ipcMain.handle("db:clinicalCondition.getAll",async()=>l.getAll()),s.ipcMain.handle("db:patientsClinicalCondition.insert",async(n,t)=>p.insert(t)),s.ipcMain.handle("db:patientsClinicalCondition.update",async(n,t)=>p.update(t)),s.ipcMain.handle("db:patientsClinicalCondition.delete",async(n,t)=>p.delete(t)),s.ipcMain.handle("db:patientsClinicalCondition.get",async(n,t)=>p.get(t)),s.ipcMain.handle("db:patientsClinicalCondition.getAll",async()=>p.getAll())});s.app.on("activate",()=>{s.BrowserWindow.getAllWindows().length===0&&E()});
