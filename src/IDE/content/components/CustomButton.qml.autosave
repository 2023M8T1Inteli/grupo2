import QtQuick 6.2
import QtQuick.Controls 2.15
import QtQuick.Layouts

Rectangle {
    // Declaring global properties for all buttons
    
    property int buttonHeight: 32
    property int buttonWidth: 152
    property string buttonValue: "Entrar" // Default button label
    property int buttonWeight: 500 // Accessible font weight for the button text
    width: 128
    color: "transparent"
    height: 64 

    // Button Signal
    signal customClicked()

    // Button Template
    Button {
        id: customButton
        property string buttonType: "primary" // Custom property to determine button style
        text: buttonValue // Text displayed on the button
        width: parent.buttonWidth // Width of the button, referring to the Rectangle's property
        height: parent.buttonHeight // Height of the button
        anchors.centerIn: parent // Center the button within the Rectangle

        // Defining the background style of the button
        background: Rectangle {
            implicitWidth: parent.width // Responsive Width
            implicitHeight: parent.height // Responsive Height
            radius: 8 // Rounded corners for the button
            color: customButton.buttonType === "primary" ? root.primaryColor : root.whiteColor
            border.color: root.primaryColor // Border color
            border.width: 2 // Border width
            anchors.fill: parent // Anchor all the corners to be the same size as parent

            // Transition effect for the background color change
            Transition {
                NumberAnimation {
                    property: "color"
                    duration: 200 // Duration of the animation in milliseconds
                }
            }
        }

        // Content of the button (text in this case)
        contentItem: Text {
            text: customButton.text // Text from the button's 'text' property
            font.weight: buttonWeight // Font weight from the custom property
            color: customButton.buttonType === "primary" ? root.whiteColor : root.primaryColor
            anchors.centerIn: parent // Center the text within the button
            font.pixelSize: 19 // Size of the font
            horizontalAlignment: Text.AlignHCenter // Align text horizontally center
            verticalAlignment: Text.AlignVCenter // Align text vertically center
        }

        // Event handler for mouse hover over the button
        onHoveredChanged: {
            // Toggle button type between 'primary' and 'secondary'
            customButton.buttonType === "primary" ? customButton.buttonType = "secondary" : customButton.buttonType = "primary"
        }

        // Event handler for button click
        onClicked: {
            // Toggle button type and emit the customClicked signal
            customButton.buttonType === "primary" ? customButton.buttonType = "secondary" : customButton.buttonType = "primary"
            customClicked()
        }
    }
}
